#include <fstream>
#include <iostream>
#include <doctest.h>
#include <Constants.hpp>
#include <readers/Bedmap.hpp>
#include <boost/spirit/include/qi.hpp>

TEST_SUITE_BEGIN("bedmap");

// Checks whether we can create a Bedmap object and load data files without errors
TEST_CASE("CREATE BEDMAP") {
    // create a new Bedmap object
    anita::readers::Bedmap _bedmap = anita::readers::Bedmap();
}

// Perform some basic checking and validation at a single point
TEST_CASE("BASIC BEDMAP QUERIES") {

    // create a new Bedmap object
    anita::readers::Bedmap bedmap = anita::readers::Bedmap();

    // peform a basic check with a fixed point. Use lat=-75, and lon=150 as this is the example in Snyder, Pg. 315
    // Test values were computed using Matlab's Antarctic Mapping Toolbox with the Bedmap2 Toolbox
    CHECK(bedmap.getSurfaceElevation(anita::degToRad(-75), anita::degToRad(150)) == doctest::Approx(2345.4).epsilon(0.005));
    CHECK(bedmap.getIceThickness(anita::degToRad(-75), anita::degToRad(150)) == doctest::Approx(2731.7).epsilon(0.005));
    CHECK(bedmap.getBedDepth(anita::degToRad(-75), anita::degToRad(150)) == doctest::Approx(-386.2751).epsilon(0.05)); // why does this one disagree so much? 5% error ~ 20m
    CHECK(bedmap.getIceMask(anita::degToRad(-75), anita::degToRad(150)) == anita::readers::IceMask::Grounded);

    // check that we don't have ice thickness at the edge of the map (-60 degrees S)
    CHECK(std::isnan(bedmap.getIceThickness(anita::degToRad(-60), 0)) == true);

    // check that we have valid data for everything at the pole
    CHECK(std::isnan(bedmap.getIceThickness(anita::degToRad(-90), 0)) == false);
    CHECK(std::isnan(bedmap.getSurfaceElevation(anita::degToRad(-90), 0)) == false);
    CHECK(std::isnan(bedmap.getBedDepth(anita::degToRad(-90), 0)) == false);
    CHECK(std::isnan(static_cast<int>(bedmap.getIceMask(anita::degToRad(-90), 0))) == false);

    // this is a simple test case that is used to debug internal indexing issues
    // with the Bedmap methods
    SUBCASE("INDEX CHECK") {
        // double thickness = bedmap.getSurfaceElevation(anita::degToRad(-75), anita::degToRad(150));
        // std::cerr << "Bed Depth: " << thickness << std::endl;
    }

}

// this test loads the test data file 'bedmap_test_data.csv' that is generated by
// the generate_Bedmap_test_values.m Matlab script and verifies that this Bedmap
// implementation agrees with the Matlab Antarctic Mapping Toolbox.
TEST_CASE("FULL BEDMAP TEST") {

    // create a Bedmap object
    anita::readers::Bedmap bedmap = anita::readers::Bedmap();

    // namespace for boost parser
    namespace qi = boost::spirit::qi;

    // types for parsing
    using qi::double_;
    using qi::char_;

    // open the file
    std::ifstream f("test/data/Bedmap_test_values.csv", std::ifstream::in);

    // we make sure that the file
    if (!f.good()) {
        std::cerr << "ERROR: Unable to open Bedmap test file. " << std::endl;
        throw std::exception();
    }

    // read the filie line by line
    std::string line;
    while (std::getline(f, line)) {

        // start and end of string
        std::string::iterator begin = line.begin();
        std::string::iterator end = line.end();

        // variables to hold data
        double lat = 0;
        double lon = 0;
        double x = 0;
        double y = 0;
        double surface = 0;
        double thickness = 0;
        double bed = 0;
        double beduncertainty = 0;
        double icemask = 0;

        // pase the line
        qi::phrase_parse(begin, end,
                         double_ >> double_ >> double_ >> double_ >> double_ >> double_ >> double_ >> double_ >> double_,
                         char_(','),
                         lat, lon, x, y, surface, thickness, bed, beduncertainty, icemask);

        // we now check that the values match with our Bedmap class
        double latr = anita::degToRad(lat);
        double lonr = anita::degToRad(lon);

        // surface is not defined everywhere, so we check if its NaN
        // if so, we expect our code to also be NaN
        if (std::isnan(surface))
            CHECK(std::isnan(bedmap.getSurfaceElevation(latr, lonr)) == true);
        else // we check as normal
            CHECK(bedmap.getSurfaceElevation(latr, lonr) == doctest::Approx(surface).epsilon(0.02));

        // check the thickness of the ice, this can be NaN as well
        if (std::isnan(thickness))
            CHECK(std::isnan(bedmap.getIceThickness(latr, lonr)) == true);
        else // we check as normal
            CHECK(bedmap.getIceThickness(latr, lonr) == doctest::Approx(thickness).epsilon(0.02));

        // check the bed depth
        CHECK(bedmap.getBedDepth(latr, lonr) == doctest::Approx(bed).epsilon(0.07));

        // and the uncertainty in the bed depth
        // TODO

        // and check Lake Vostok
        // TODO

        // check the ice mask
        CHECK(static_cast<int>(bedmap.getIceMask(latr, lonr)) == icemask);

    }

}



TEST_SUITE_END();
